// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import SpriteKit;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import GLKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface SKAction (SWIFT_EXTENSION(SKTiled))
@end

@class SKTilemap;
@class UIColor;
@class SKSpriteNode;
@class NSCoder;
@class UITouch;

/// The <code>TiledLayerObject</code> is the base class for all <em>SKTiled</em> layer types.  This class
/// doesn’t define any object or child types, but manages several important aspects of your scene:
/// <ul>
///   <li>
///     validating coordinates
///   </li>
///   <li>
///     positioning and alignment
///   </li>
///   <li>
///     coordinate transformations
///   </li>
/// </ul>
/// Layer properties are accessed via properties shared with the parent tilemap:
/// \code
///  layer.size            // size (in tiles)
///  layer.tileSize        // tile size (in pixels)
///
/// \endcodeCoordinate transformation functions return coordinates in the current tilemap projection:
/// \code
///  node.position = tileLayer.pointForCoordinate(2, 1)
///
/// \endcode
SWIFT_CLASS("_TtC7SKTiled16TiledLayerObject")
@interface TiledLayerObject : SKNode
@property (nonatomic, strong) SKTilemap * _Nonnull tilemap;
/// Unique object id.
@property (nonatomic, copy) NSString * _Nonnull uuid;
/// Layer index. Matches the index of the layer in the source TMX file.
@property (nonatomic) NSInteger index;
/// Custom layer properties.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull properties;
/// Layer color.
@property (nonatomic, strong) UIColor * _Nonnull color;
/// Grid visualization color.
@property (nonatomic, strong) UIColor * _Nonnull gridColor;
/// Bounding box color.
@property (nonatomic, strong) UIColor * _Nonnull frameColor;
/// Layer highlight color
@property (nonatomic, strong) UIColor * _Nonnull highlightColor;
/// Layer offset value.
@property (nonatomic) CGPoint offset;
/// Layer size (in tiles).
@property (nonatomic, readonly) CGSize size;
/// Layer tile size (in pixels).
@property (nonatomic, readonly) CGSize tileSize;
/// Layer anchor point, used to position layers.
@property (nonatomic, readonly) CGPoint anchorPoint;
@property (nonatomic, readonly) CGFloat width;
@property (nonatomic, readonly) CGFloat height;
@property (nonatomic, readonly) CGFloat tileWidth;
@property (nonatomic, readonly) CGFloat tileHeight;
@property (nonatomic, readonly) CGSize sizeHalved;
@property (nonatomic, readonly) CGFloat tileWidthHalf;
@property (nonatomic, readonly) CGFloat tileHeightHalf;
@property (nonatomic, readonly) CGSize sizeInPoints;
@property (nonatomic) CGFloat gridOpacity;
@property (nonatomic) BOOL antialiased;
@property (nonatomic) CGFloat colorBlendFactor;
/// Layer background sprite.
@property (nonatomic, strong) SKSpriteNode * _Nonnull background;
/// Returns the position of layer origin point (used to place tiles).
@property (nonatomic, readonly) CGPoint origin;
/// Returns the frame rectangle of the layer (used to draw bounds).
@property (nonatomic, readonly) CGRect boundingRect;
/// Layer transparency.
@property (nonatomic) CGFloat opacity;
/// Layer visibility.
@property (nonatomic) BOOL visible;
/// Show the layer’s grid.
@property (nonatomic) BOOL showGrid;
/// Visualize the layer’s bounds & tile grid.
@property (nonatomic) BOOL debugDraw;
/// Initialize via the parser.
/// <em>This intializer is meant to be called by the <code>SKTilemapParser</code>, you should not use it directly.</em>
/// \param layerName <code>String</code> layer name.
///
/// \param tilemap <code>SKTilemap</code> parent tilemap node.
///
/// \param attributes <code>[String: String]</code> dictionary of layer attributes.
///
///
/// returns:
/// <code>TiledLayerObject?</code> tiled layer, if initialization succeeds.
- (nullable instancetype)initWithLayerName:(NSString * _Nonnull)layerName tilemap:(SKTilemap * _Nonnull)tilemap attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes OBJC_DESIGNATED_INITIALIZER;
/// Create a new layer within the parent tilemap node.
/// \param layerName <code>String</code> layer name.
///
/// \param tilemap <code>SKTilemap</code> parent tilemap node.
///
///
/// returns:
/// <code>TiledLayerObject</code> tiled layer object.
- (nonnull instancetype)initWithLayerName:(NSString * _Nonnull)layerName tilemap:(SKTilemap * _Nonnull)tilemap OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Set the layer color with an <code>SKColor</code>.
/// \param color <code>SKColor</code> object color.
///
- (void)setColorWithColor:(UIColor * _Nonnull)color;
/// Set the layer color with a hex string.
/// \param hexString <code>String</code> color hex string.
///
- (void)setColorWithHexString:(NSString * _Nonnull)hexString;
/// Returns a converted touch location.
/// \param touch <code>UITouch</code> touch location.
///
///
/// returns:
/// <code>CGPoint</code> converted point in layer coordinate system.
- (CGPoint)touchLocation:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
/// Returns the tile coordinate for a touch location.
/// \param touch <code>UITouch</code> touch location.
///
///
/// returns:
/// <code>CGPoint</code> converted point in layer coordinate system.
- (CGPoint)coordinateAtTouchLocation:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
/// Returns true if the coordinate is valid.
/// \param x <code>Int</code> x-coordinate.
///
/// \param y <code>Int</code> y-coordinate.
///
///
/// returns:
/// <code>Bool</code> coodinate is valid.
- (BOOL)isValid:(NSInteger)x :(NSInteger)y SWIFT_WARN_UNUSED_RESULT;
/// Returns true if the coordinate is valid.
/// \param coord <code>CGPoint</code> tile coordinate.
///
///
/// returns:
/// <code>Bool</code> coodinate is valid.
- (BOOL)isValidWithCoord:(CGPoint)coord SWIFT_WARN_UNUSED_RESULT;
/// Converts a point to a point in the layer.
/// \param coord <code>CGPoint</code> input point.
///
///
/// returns:
/// <code>CGPoint</code> point with y-value inverted.
- (CGPoint)convertPoint:(CGPoint)point SWIFT_WARN_UNUSED_RESULT;
/// Returns a point for a given coordinate in the layer.
/// \param coord <code>CGPoint</code> tile coordinate.
///
///
/// returns:
/// <code>CGPoint</code> point in layer.
- (CGPoint)pointForCoordinateWithCoord:(CGPoint)coord offsetX:(CGFloat)offsetX offsetY:(CGFloat)offsetY SWIFT_WARN_UNUSED_RESULT;
/// Returns a tile coordinate for a given point in the layer.
/// \param point <code>CGPoint</code> point in layer.
///
///
/// returns:
/// <code>CGPoint</code> tile coordinate.
- (CGPoint)coordinateForPoint:(CGPoint)point SWIFT_WARN_UNUSED_RESULT;
/// Visualize the layer’s bounds.
- (void)drawBounds;
/// Called when the layer is finished rendering.
/// \param duration <code>TimeInterval</code> fade-in duration.
///
- (void)didFinishRenderingWithDuration:(NSTimeInterval)duration;
/// Set up physics for the entire layer.
/// \param isDynamic <code>Bool</code> layer is dynamic.
///
- (void)setupPhysicsWithIsDynamic:(BOOL)isDynamic;
@property (nonatomic, readonly) NSInteger hashValue;
- (void)debugLayer;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// The <code>SKGroupLayer</code> object is a container for grouping other layers.
/// Add layers to the group with:
/// \code
/// groupLayer.addLayer(playerLayer)
///
/// \endcodeRemove with:
/// \code
/// groupLayer.removeLayer(playerLayer)
///
/// \endcode
SWIFT_CLASS("_TtC7SKTiled12SKGroupLayer")
@interface SKGroupLayer : TiledLayerObject
/// Returns the last index for all tilesets.
@property (nonatomic, readonly) NSInteger lastIndex;
/// Returns the last (highest) z-position in the map.
@property (nonatomic, readonly) CGFloat lastZPosition;
/// Initialize with a layer name, and parent <code>SKTilemap</code> node.
/// \param layerName <code>String</code> image layer name.
///
/// \param tilemap <code>SKTilemap</code> parent map.
///
- (nonnull instancetype)initWithLayerName:(NSString * _Nonnull)layerName tilemap:(SKTilemap * _Nonnull)tilemap OBJC_DESIGNATED_INITIALIZER;
/// Initialize with parent <code>SKTilemap</code> and layer attributes.
/// <em>Do not use this intializer directly</em>
/// \param tilemap <code>SKTilemap</code> parent map.
///
/// \param attributes <code>[String: String]</code> layer attributes.
///
- (nullable instancetype)initWithTilemap:(SKTilemap * _Nonnull)tilemap attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Returns all layers, sorted by index (first is lowest, last is highest).
///
/// returns:
/// <code>[TiledLayerObject]</code> array of layers.
- (NSArray<TiledLayerObject *> * _Nonnull)allLayers SWIFT_WARN_UNUSED_RESULT;
/// Returns an array of layer names.
///
/// returns:
/// <code>[String]</code> layer names.
- (NSArray<NSString *> * _Nonnull)layerNames SWIFT_WARN_UNUSED_RESULT;
/// Add a layer to the layers set. Automatically sets zPosition based on the tilemap zDeltaForLayers attributes.
/// \param layer <code>TiledLayerObject</code> layer object.
///
/// \param base <code>Bool</code> layer represents default layer.
///
- (void)addLayer:(TiledLayerObject * _Nonnull)layer;
/// Remove a layer from the current layers set.
/// \param layer <code>TiledLayerObject</code> layer object.
///
///
/// returns:
/// <code>TiledLayerObject?</code> removed layer.
- (TiledLayerObject * _Nullable)removeLayer:(TiledLayerObject * _Nonnull)layer SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithLayerName:(NSString * _Nonnull)layerName tilemap:(SKTilemap * _Nonnull)tilemap attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes SWIFT_UNAVAILABLE;
@end


/// The <code>SKImageLayer</code> object is really nothing more than a sprite with positioning attributes.
/// Set the layer image with:
/// \code
/// imageLayer.setLayerImage("clouds-background")
///
/// \endcode
SWIFT_CLASS("_TtC7SKTiled12SKImageLayer")
@interface SKImageLayer : TiledLayerObject
@property (nonatomic, copy) NSString * _Null_unspecified image;
@property (nonatomic) BOOL wrapX;
@property (nonatomic) BOOL wrapY;
/// Initialize with a layer name, and parent <code>SKTilemap</code> node.
/// \param layerName <code>String</code> image layer name.
///
/// \param tilemap <code>SKTilemap</code> parent map.
///
- (nonnull instancetype)initWithLayerName:(NSString * _Nonnull)layerName tilemap:(SKTilemap * _Nonnull)tilemap OBJC_DESIGNATED_INITIALIZER;
/// Initialize with parent <code>SKTilemap</code> and layer attributes.
/// <em>Do not use this intializer directly</em>
/// \param tilemap <code>SKTilemap</code> parent map.
///
/// \param attributes <code>[String: String]</code> layer attributes.
///
- (nullable instancetype)initWithTilemap:(SKTilemap * _Nonnull)tilemap attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes OBJC_DESIGNATED_INITIALIZER;
/// Set the layer image as a sprite.
/// \param named <code>String</code> image name.
///
- (void)setLayerImage:(NSString * _Nonnull)named;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithLayerName:(NSString * _Nonnull)layerName tilemap:(SKTilemap * _Nonnull)tilemap attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes SWIFT_UNAVAILABLE;
@end


@interface SKImageLayer (SWIFT_EXTENSION(SKTiled))
/// Parse the image layer’s properties.
- (void)parsePropertiesWithCompletion:(void (^ _Nullable)(void))completion;
@end


@interface SKNode (SWIFT_EXTENSION(SKTiled))
@end

@class SKTileObject;

/// The <code>SKObjectGroup</code> object is a container that manages child vector objects that are drawn in the current coordinate space.
/// Most object properties can be set on the parent <code>SKObjectGroup</code> which is then applied to all child objects.
/// Adding a child object with optional color override:
/// \code
/// objectGroup.addObject(myObject, withColor: SKColor.red)
///
/// \endcodeQuerying an object with a specific name:
/// \code
/// let doorObject = objectGroup.getObject(named: "Door")
///
/// \endcodeGetting objects of a certain type:
/// \code
/// let rockObjects = objectGroup.getObjects(ofType: "Rock")
///
/// \endcode
SWIFT_CLASS("_TtC7SKTiled13SKObjectGroup")
@interface SKObjectGroup : TiledLayerObject
/// Toggle visibility for all of the objects in the layer.
@property (nonatomic) BOOL showObjects;
/// Returns the number of objects in this layer.
@property (nonatomic, readonly) NSInteger count;
/// Controls antialiasing for each object
@property (nonatomic) BOOL antialiased;
/// Governs object line width for each object.
@property (nonatomic) CGFloat lineWidth;
/// Initialize with layer name and parent <code>SKTilemap</code>.
/// \param layerName <code>String</code> layer name.
///
/// \param tilemap <code>SKTilemap</code> parent map.
///
- (nonnull instancetype)initWithLayerName:(NSString * _Nonnull)layerName tilemap:(SKTilemap * _Nonnull)tilemap OBJC_DESIGNATED_INITIALIZER;
/// Initialize with parent <code>SKTilemap</code> and layer attributes.
/// <em>Do not use this intializer directly</em>
/// \param tilemap <code>SKTilemap</code> parent map.
///
/// \param attributes <code>[String: String]</code> layer attributes.
///
- (nullable instancetype)initWithTilemap:(SKTilemap * _Nonnull)tilemap attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Add an <code>SKTileObject</code> object to the objects set.
/// \param object <code>SKTileObject</code> object.
///
/// \param withColor <code>SKColor?</code> optional override color (otherwise defaults to parent layer color).
///
///
/// returns:
/// <code>SKTileObject?</code> added object.
- (SKTileObject * _Nullable)addObject:(SKTileObject * _Nonnull)object withColor:(UIColor * _Nullable)withColor SWIFT_WARN_UNUSED_RESULT;
/// Remove an <code>SKTileObject</code> object from the objects set.
/// \param object <code>SKTileObject</code> object.
///
///
/// returns:
/// <code>SKTileObject?</code> removed object.
- (SKTileObject * _Nullable)removeObject:(SKTileObject * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
/// Render all of the objects in the group.
- (void)drawObjects;
/// Set the color for all objects.
/// \param color <code>SKColor</code> object color.
///
/// \param force <code>Bool</code> force color on objects that have an override.
///
- (void)setColorWithColor:(UIColor * _Nonnull)color;
/// Set the color for all objects.
/// \param color <code>SKColor</code> object color.
///
/// \param force <code>Bool</code> force color on objects that have an override.
///
- (void)setColorWithHexString:(NSString * _Nonnull)hexString;
/// Returns an array of object names.
///
/// returns:
/// <code>[String]</code> object names in the layer.
- (NSArray<NSString *> * _Nonnull)objectNames SWIFT_WARN_UNUSED_RESULT;
/// Returns an object with the given id.
/// \param id <code>Int</code> Object id.
///
///
/// returns:
/// <code>SKTileObject?</code>
- (SKTileObject * _Nullable)getObjectWithID:(NSInteger)id SWIFT_WARN_UNUSED_RESULT;
/// Returns an object with the given name.
/// \param name <code>String</code> Object name.
///
///
/// returns:
/// <code>SKTileObject?</code>
- (SKTileObject * _Nullable)getObjectWithNamed:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Return all child objects.
///
/// returns:
/// <code>[SKTileObject]</code> array of matching objects.
- (NSArray<SKTileObject *> * _Nonnull)getObjects SWIFT_WARN_UNUSED_RESULT;
/// Return objects of a given type.
/// \param type <code>String</code> object type.
///
///
/// returns:
/// <code>[SKTileObject]</code> array of matching objects.
- (NSArray<SKTileObject *> * _Nonnull)getObjectsOfType:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// Return objects matching a given name.
/// \param named <code>String</code> object name.
///
///
/// returns:
/// <code>[SKTileObject]</code> array of matching objects.
- (NSArray<SKTileObject *> * _Nonnull)getObjectsWithNamed:(NSString * _Nonnull)named SWIFT_WARN_UNUSED_RESULT;
/// Called when the layer is finished rendering.
/// \param duration <code>TimeInterval</code> fade-in duration.
///
- (void)didFinishRenderingWithDuration:(NSTimeInterval)duration;
- (nullable instancetype)initWithLayerName:(NSString * _Nonnull)layerName tilemap:(SKTilemap * _Nonnull)tilemap attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes SWIFT_UNAVAILABLE;
@end


@interface SKObjectGroup (SWIFT_EXTENSION(SKTiled))
/// Parse the object group’s properties.
- (void)parsePropertiesWithCompletion:(void (^ _Nullable)(void))completion;
@end


@interface SKScene (SWIFT_EXTENSION(SKTiled))
/// Returns the center point of a scene.
@property (nonatomic, readonly) CGPoint center;
/// Calculate the distance from the scene’s origin
- (CGVector)distanceFromOrigin:(CGPoint)pos SWIFT_WARN_UNUSED_RESULT;
@end

@class SKTileLayer;
@class SKTexture;

/// Custom sprite type for rendering tile objects. Tile data (including texture) stored in <code>SKTilesetData</code> property.
SWIFT_CLASS("_TtC7SKTiled6SKTile")
@interface SKTile : SKSpriteNode
/// Reference to the parent layer.
@property (nonatomic, weak) SKTileLayer * _Null_unspecified layer;
@property (nonatomic) CGSize tileSize;
@property (nonatomic, strong) UIColor * _Nonnull highlightColor;
/// Opacity value of the tile
@property (nonatomic) CGFloat opacity;
/// Visibility value of the tile
@property (nonatomic) BOOL visible;
/// Boolean flag to enable/disable texture filtering.
@property (nonatomic) BOOL smoothing;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initialize the tile texture.
/// \param texture <code>SKTexture?</code> tile texture.
///
///
/// returns:
/// <code>SKTile</code> tile sprite.
- (nonnull instancetype)initWithTexture:(SKTexture * _Nullable)texture OBJC_DESIGNATED_INITIALIZER;
/// Initialize the tile with a tile size.
/// \param tileSize <code>CGSize</code> tile size in pixels.
///
///
/// returns:
/// <code>SKTile</code> tile sprite.
- (nonnull instancetype)initWithTileSize:(CGSize)size OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Set up the tile’s dynamics body with a rectanglular shape.
/// \param rectSize <code>CGSize</code> rectangle size.
///
/// \param isDynamic <code>Bool</code> physics body is active.
///
- (void)setupPhysicsWithRectSize:(CGSize)rectSize isDynamic:(BOOL)isDynamic;
/// Set up the tile’s dynamics body with a rectanglular shape.
/// \param withSize <code>CGFloat</code> rectangle size.
///
/// \param isDynamic <code>Bool</code> physics body is active.
///
- (void)setupPhysicsWithSize:(CGFloat)withSize isDynamic:(BOOL)isDynamic;
/// Set up the tile’s dynamics body with a circular shape.
/// \param radius <code>CGFloat</code> circle radius.
///
/// \param isDynamic <code>Bool</code> physics body is active.
///
- (void)setupPhysicsWithRadius:(CGFloat)radius isDynamic:(BOOL)isDynamic;
/// Remove tile physics body.
/// \param withSize <code>CGFloat</code> dynamics body size.
///
- (void)removePhysics;
/// Checks if the tile is animated and runs an action to animate it.
- (void)runAnimation;
/// Pauses tile animation
@property (nonatomic) BOOL pauseAnimation;
/// Remove the animation for the current tile.
/// \param restore <code>Bool</code> restore the tile’s first texture.
///
- (void)removeAnimationWithRestore:(BOOL)restore;
/// Set the tile overlap amount.
/// \param overlap <code>CGFloat</code> tile overlap.
///
- (void)setTileOverlap:(CGFloat)overlap;
/// Returns the points of the tile’s shape.
///
/// returns:
/// <code>[CGPoint]?</code> array of points.
- (NSArray<NSValue *> * _Nonnull)getVertices SWIFT_WARN_UNUSED_RESULT;
/// Draw the tile’s boundary shape. Optional anti-aliasing & time duration
/// (duration of 0 never fades).
/// \param antialiasing <code>Bool</code> antialias the effect.
///
/// \param duration <code>TimeInterval</code> effect duration.
///
- (void)drawBoundsWithAntialiasing:(BOOL)antialiasing duration:(NSTimeInterval)duration;
- (nonnull instancetype)initWithTexture:(SKTexture * _Nullable)texture color:(UIColor * _Nonnull)color size:(CGSize)size SWIFT_UNAVAILABLE;
@end


@interface SKTile (SWIFT_EXTENSION(SKTiled))
/// Tile description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Highlight the tile with a given color.
/// \param color <code>SKColor</code> highlight color.
///
- (void)highlightWithColor:(UIColor * _Nullable)color duration:(NSTimeInterval)duration antialiasing:(BOOL)antialiasing;
/// Clear highlighting.
- (void)clearHighlight;
@end

@class SKUniform;

/// The <code>SKTileLayer</code> class  manages an array of tiles (sprites) that it renders as a single image.
/// This class manages setting and querying tile data.
/// Accessing a tile:
/// \code
/// let tile = tileLayer.tileAt(2, 6)!
///
/// \endcodeGetting tiles of a certain type:
/// \code
/// let floorTiles = tileLayer.getTiles(ofType: "Floor")
///
/// \endcode
SWIFT_CLASS("_TtC7SKTiled11SKTileLayer")
@interface SKTileLayer : TiledLayerObject
@property (nonatomic) BOOL render;
/// Initialize with layer name and parent <code>SKTilemap</code>.
/// \param layerName <code>String</code> layer name.
///
/// \param tilemap <code>SKTilemap</code> parent map.
///
- (nonnull instancetype)initWithLayerName:(NSString * _Nonnull)layerName tilemap:(SKTilemap * _Nonnull)tilemap OBJC_DESIGNATED_INITIALIZER;
/// Initialize with parent <code>SKTilemap</code> and layer attributes.
/// <em>Do not use this intializer directly</em>
/// \param tilemap <code>SKTilemap</code> parent map.
///
/// \param attributes <code>[String: String]</code> layer attributes.
///
- (nullable instancetype)initWithTilemap:(SKTilemap * _Nonnull)tilemap attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Returns a tile at the given coordinate, if one exists.
/// \param x <code>Int</code> y-coordinate.
///
/// \param y <code>Int</code> x-coordinate.
///
///
/// returns:
/// <code>SKTile?</code> tile object, if it exists.
- (SKTile * _Nullable)tileAt:(NSInteger)x :(NSInteger)y SWIFT_WARN_UNUSED_RESULT;
/// Returns a tile at the given coordinate, if one exists.
/// \param coord <code>CGPoint</code> tile coordinate.
///
///
/// returns:
/// <code>SKTile?</code> tile object, if it exists.
- (SKTile * _Nullable)tileAtCoord:(CGPoint)coord SWIFT_WARN_UNUSED_RESULT;
/// Returns all current tiles.
///
/// returns:
/// <code>[SKTile]</code> array of tiles.
- (NSArray<SKTile *> * _Nonnull)getTiles SWIFT_WARN_UNUSED_RESULT;
/// Returns tiles with a property of the given type.
/// \param type <code>String</code> type.
///
///
/// returns:
/// <code>[SKTile]</code> array of tiles.
- (NSArray<SKTile *> * _Nonnull)getTilesOfType:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// Returns tiles matching the given gid.
/// \param type <code>Int</code> tile gid.
///
///
/// returns:
/// <code>[SKTile]</code> array of tiles.
- (NSArray<SKTile *> * _Nonnull)getTilesWithID:(NSInteger)id SWIFT_WARN_UNUSED_RESULT;
/// Returns tiles with a property of the given type.
/// \param type <code>String</code> type.
///
///
/// returns:
/// <code>[SKTile]</code> array of tiles.
- (NSArray<SKTile *> * _Nonnull)getTilesWithProperty:(NSString * _Nonnull)named :(id _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
/// Returns all tiles with animation.
///
/// returns:
/// <code>[SKTile]</code> array of animated tiles.
- (NSArray<SKTile *> * _Nonnull)getAnimatedTiles SWIFT_WARN_UNUSED_RESULT;
/// Add tile data array to the layer and render it.
/// \param data <code>[Int]</code> tile data.
///
///
/// returns:
/// <code>Bool</code> data was successfully added.
- (BOOL)setLayerData:(NSArray<NSNumber *> * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Build an empty tile at the given coordinates with a custom texture. Returns nil is the coordinate
/// is invalid.
/// \param coord <code>CGPoint</code> tile coordinate.
///
/// \param texture <code>SKTexture?</code> optional tile texture.
///
///
/// returns:
/// <code>SKTile?</code> tile.
- (SKTile * _Nullable)addTileAtCoord:(CGPoint)coord texture:(SKTexture * _Nullable)texture SWIFT_WARN_UNUSED_RESULT;
/// Build an empty tile at the given coordinates with a custom texture. Returns nil is the coordinate
/// is invalid.
/// \param x <code>Int</code> x-coordinate
///
/// \param y <code>Int</code> y-coordinate
///
/// \param texture <code>SKTexture?</code> optional tile texture.
///
///
/// returns:
/// <code>SKTile?</code> tile.
- (SKTile * _Nullable)addTileAt:(NSInteger)x :(NSInteger)y texture:(SKTexture * _Nullable)texture SWIFT_WARN_UNUSED_RESULT;
/// Remove the tile at a given x/y coordinates.
/// \param x <code>Int</code> x-coordinate
///
/// \param y <code>Int</code> y-coordinate
///
///
/// returns:
/// <code>SKTile?</code> removed tile.
- (SKTile * _Nullable)removeTileAt:(NSInteger)x :(NSInteger)y SWIFT_WARN_UNUSED_RESULT;
/// Remove the tile at a given coordinate.
/// \param coord <code>CGPoint</code> tile coordinate.
///
///
/// returns:
/// <code>SKTile?</code> removed tile.
- (SKTile * _Nullable)removeTileAtCoord:(CGPoint)coord SWIFT_WARN_UNUSED_RESULT;
/// Set a tile at the given coordinate.
/// \param x <code>Int</code> x-coordinate
///
/// \param y <code>Int</code> y-coordinate
///
///
/// returns:
/// <code>SKTile?</code> tile.
- (SKTile * _Nullable)setTile:(NSInteger)x :(NSInteger)y tile:(SKTile * _Nullable)tile SWIFT_WARN_UNUSED_RESULT;
/// Set a tile at the given coordinate.
/// \param coord <code>CGPoint</code> tile coordinate.
///
///
/// returns:
/// <code>SKTile?</code> tile.
- (SKTile * _Nullable)setTileAt:(CGPoint)coord tile:(SKTile * _Nullable)tile SWIFT_WARN_UNUSED_RESULT;
/// Set the tile overlap. Only accepts a value between 0 - 1.0
/// \param overlap <code>CGFloat</code> tile overlap value.
///
- (void)setTileOverlap:(CGFloat)overlap;
/// Called when the layer is finished rendering.
/// \param duration <code>TimeInterval</code> fade-in duration.
///
- (void)didFinishRenderingWithDuration:(NSTimeInterval)duration;
/// Set a shader for the tile layer.
/// \param named <code>String</code> shader file name.
///
/// \param uniforms <code>[SKUniform]</code> array of shader uniforms.
///
- (void)setShaderWithNamed:(NSString * _Nonnull)named uniforms:(NSArray<SKUniform *> * _Nonnull)uniforms;
- (void)debugLayer;
- (nullable instancetype)initWithLayerName:(NSString * _Nonnull)layerName tilemap:(SKTilemap * _Nonnull)tilemap attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes SWIFT_UNAVAILABLE;
@end


@interface SKTileLayer (SWIFT_EXTENSION(SKTiled))
/// Parse the tile layer’s properties.
- (void)parsePropertiesWithCompletion:(void (^ _Nullable)(void))completion;
@end


@interface SKTileLayer (SWIFT_EXTENSION(SKTiled))
/// Returns only tiles that are valid (not empty).
///
/// returns:
/// <code>[SKTile]</code> array of tiles.
- (NSArray<SKTile *> * _Nonnull)validTiles SWIFT_WARN_UNUSED_RESULT;
/// Returns a count of valid tiles.
@property (nonatomic, readonly) NSInteger tileCount;
@end


/// The <code>SKTileObject</code> object represents a Tiled object type (rectangle, ellipse, polygon & polyline).
/// When the object is created, points can be added either with an array of <code>CGPoint</code> objects, or a string. In order to render the object, the <code>SKTileObject.getVertices()</code> method is called, which returns the points that make up the shape.
SWIFT_CLASS("_TtC7SKTiled12SKTileObject")
@interface SKTileObject : SKShapeNode
@property (nonatomic, weak) SKObjectGroup * _Null_unspecified layer;
@property (nonatomic, copy) NSString * _Nonnull uuid;
@property (nonatomic) NSInteger id;
@property (nonatomic, copy) NSString * _Null_unspecified type;
@property (nonatomic) CGSize size;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull properties;
/// Object opacity
@property (nonatomic) CGFloat opacity;
/// Object visibility
@property (nonatomic) BOOL visible;
/// Returns the bounding box of the shape.
@property (nonatomic, readonly) CGRect boundingRect;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithAttributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Set the fill & stroke colors (with optional alpha component for the fill)
/// \param color <code>SKColor</code> fill & stroke color.
///
/// \param alpha <code>CGFloat</code> alpha component for fill.
///
- (void)setColorWithColor:(UIColor * _Nonnull)color withAlpha:(CGFloat)alpha;
/// Set the fill & stroke colors with a hexadecimal string.
/// \param color <code>hexString</code> hex color string.
///
/// \param alpha <code>CGFloat</code> alpha component for fill.
///
- (void)setColorWithHexString:(NSString * _Nonnull)hexString withAlpha:(CGFloat)alpha;
/// Render the object.
- (void)drawObject;
/// Returns the internal <code>SKTileObject.points</code> translated into the current map projection.
///
/// returns:
/// <code>[CGPoint]?</code> array of points.
- (NSArray<NSValue *> * _Nullable)getVertices SWIFT_WARN_UNUSED_RESULT;
- (void)didBeginRenderingWithCompletion:(void (^ _Nullable)(void))completion;
- (void)didFinishRenderingWithCompletion:(void (^ _Nullable)(void))completion;
/// Setup physics for the object based on properties set up in Tiled.
- (void)setupPhysics;
@end


@interface SKTileObject (SWIFT_EXTENSION(SKTiled))
/// Parse the object’s properties value.
- (void)parsePropertiesWithCompletion:(void (^ _Nullable)(void))completion;
@end


@interface SKTileObject (SWIFT_EXTENSION(SKTiled))
@property (nonatomic, readonly) NSInteger hashValue;
/// Tile data description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

@class SKTiledSceneCamera;
@class SKView;

/// Custom scene type for managing <code>SKTilemap</code> nodes.
/// \param worldNode <code>SKNode!</code> world container node.
///
/// \param cameraNode <code>SKTiledSceneCamera!</code> scene camera node.
///
/// \param tilemap <code>SKTilemap!</code> tile map node.
///
SWIFT_CLASS("_TtC7SKTiled12SKTiledScene")
@interface SKTiledScene : SKScene <SKPhysicsContactDelegate>
/// World container node.
@property (nonatomic, strong) SKNode * _Null_unspecified worldNode;
/// Custom scene camera.
@property (nonatomic, strong) SKTiledSceneCamera * _Null_unspecified cameraNode;
/// Tile map node.
@property (nonatomic, strong) SKTilemap * _Null_unspecified tilemap;
/// Current TMX file name.
@property (nonatomic, copy) NSString * _Null_unspecified tmxFilename;
/// Initialize without a tiled map.
/// \param size <code>CGSize</code> scene size.
///
///
/// returns:
/// <code>SKTiledScene</code> scene.
- (nonnull instancetype)initWithSize:(CGSize)size OBJC_DESIGNATED_INITIALIZER;
/// Initialize with a tiled file name.
/// \param size <code>CGSize</code> scene size.
///
/// \param tmxFile <code>String</code> tiled file name.
///
- (nonnull instancetype)initWithSize:(CGSize)size tmxFile:(NSString * _Nonnull)tmxFile OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)sceneDidLoad;
- (void)didMoveToView:(SKView * _Nonnull)view;
/// Setup the world container node.
- (void)setupWorld;
/// Setup the scene camera, referencing the world container node.
- (void)setupCamera;
/// Load a named TMX file.
/// \param filename <code>String</code> TMX file name.
///
///
/// returns:
/// <code>SKTilemap?</code> tile map node.
- (SKTilemap * _Nullable)loadFromFile:(NSString * _Nonnull)filename SWIFT_WARN_UNUSED_RESULT;
- (void)didBeginParsing:(SKTilemap * _Nonnull)tilemap;
- (void)didAddLayer:(TiledLayerObject * _Nonnull)layer;
- (void)didReadMap:(SKTilemap * _Nonnull)tilemap;
- (void)didRenderMap:(SKTilemap * _Nonnull)tilemap;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class UIPanGestureRecognizer;
@class UITapGestureRecognizer;
@class UIPinchGestureRecognizer;

/// Custom scene camera that responds to finger/mouse gestures.
/// The <code>SKTiledSceneCamera</code> is a custom camera meant to be used with a <code>SKTiledSceneDelegate</code> scene. The camera defines a position in the scene to render the scene from, with a reference to the <code>SKTiledSceneDelegate.worldNode</code> to interact with tile maps.
/// The <code>SKTiledSceneCamera</code> implements custom <code>UIGestureRecognizer</code> (iOS) and <code>NSEvent</code> mouse events (macOS) to aid in navigating your scenes.
SWIFT_CLASS("_TtC7SKTiled18SKTiledSceneCamera")
@interface SKTiledSceneCamera : SKCameraNode
@property (nonatomic) CGFloat zoom;
@property (nonatomic) CGFloat initialZoom;
@property (nonatomic) BOOL allowMovement;
@property (nonatomic) BOOL allowZoom;
@property (nonatomic) BOOL allowRotation;
@property (nonatomic, readonly) BOOL isAtMaxZoom;
/// Gesture recognizer to recognize camera panning
@property (nonatomic, strong) UIPanGestureRecognizer * _Null_unspecified cameraPanned;
/// Gesture recognizer to recognize double taps
@property (nonatomic, strong) UITapGestureRecognizer * _Null_unspecified sceneDoubleTapped;
/// Gesture recognizer to recognize pinch actions
@property (nonatomic, strong) UIPinchGestureRecognizer * _Null_unspecified cameraPinched;
@property (nonatomic) BOOL showOverlay;
- (nonnull instancetype)initWithView:(SKView * _Nonnull)view world:(SKNode * _Nonnull)node OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Apply zooming to the world node (as scale).
/// \param scale <code>CGFloat</code> zoom amount.
///
- (void)setCameraZoom:(CGFloat)scale;
/// Apply zooming to the camera based on location.
/// \param scale <code>CGFloat</code> zoom amount.
///
/// \param location <code>CGPoint</code> zoom location.
///
- (void)setCameraZoomAtLocationWithScale:(CGFloat)scale location:(CGPoint)location;
/// Set the camera min/max zoom values.
/// \param minimum <code>CGFloat</code> minimum zoom vector.
///
/// \param maximum <code>CGFloat</code> maximum zoom vector.
///
- (void)setZoomConstraintsWithMinimum:(CGFloat)minimum maximum:(CGFloat)maximum;
/// Move the camera to the given location.
/// \param location <code>CGPoint</code> new location.
///
/// \param previous <code>CGPoint</code> old location.
///
- (void)moveCameraWithLocation:(CGPoint)location previous:(CGPoint)previous;
/// Move camera around manually.
/// \param point <code>CGPoint</code> point to move to.
///
/// \param duration <code>TimeInterval</code> duration of move.
///
- (void)panToPoint:(CGPoint)point duration:(NSTimeInterval)duration;
/// Center the camera on a location in the scene.
/// \param scenePoint <code>CGPoint</code> point in scene.
///
/// \param easeInOut <code>TimeInterval</code> ease in/out speed.
///
- (void)centerOnScenePoint:(CGPoint)point duration:(NSTimeInterval)duration;
/// Center the camera on a node in the scene.
/// \param scenePoint <code>SKNode</code> node in scene.
///
/// \param easeInOut <code>TimeInterval</code> ease in/out speed.
///
- (void)centerOn:(SKNode * _Nonnull)node duration:(NSTimeInterval)duration;
/// Reset the camera position & zoom level.
- (void)resetCamera;
/// Reset the camera position & zoom level.
/// \param toScale <code>CGFloat</code> camera scale.
///
- (void)resetCameraToScale:(CGFloat)scale;
/// Center & fit the current tilemap in the frame.
/// Also sets the <code>SKTilemap.autoResize</code> parameter.
- (void)fitToView;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface SKTiledSceneCamera (SWIFT_EXTENSION(SKTiled))
/// Update the scene camera when a pan gesture is recogized.
/// \param recognizer <code>UIPanGestureRecognizer</code> pan gesture recognizer.
///
- (void)cameraPanned:(UIPanGestureRecognizer * _Nonnull)recognizer;
/// Handler for double taps.
/// \param recognizer <code>UITapGestureRecognizer</code> tap gesture recognizer.
///
- (void)sceneDoubleTapped:(UITapGestureRecognizer * _Nonnull)recognizer;
/// Update the camera scale in the scene.
/// \param recognizer <code>UIPinchGestureRecognizer</code>
///
- (void)scenePinched:(UIPinchGestureRecognizer * _Nonnull)recognizer;
@end


/// The <code>SKTilemap</code> class represents a container which manages layers, tiles (sprites), vector objects & images.
/// <ul>
///   <li>
///     <code>size</code>:          <code>CGSize</code> tile map size in tiles.
///   </li>
///   <li>
///     <code>tileSize</code>:      <code>CGSize</code> tile map tile size in pixels.
///   </li>
///   <li>
///     <code>sizeInPoints</code>:  <code>CGSize</code> tile map size in points.
///   </li>
/// </ul>
/// Tile data is stored in <code>SKTileset</code> tile sets.
SWIFT_CLASS("_TtC7SKTiled9SKTilemap")
@interface SKTilemap : SKCropNode
@property (nonatomic, copy) NSString * _Null_unspecified filename;
@property (nonatomic, copy) NSString * _Nonnull uuid;
@property (nonatomic) CGSize size;
@property (nonatomic) CGSize tileSize;
@property (nonatomic) NSInteger hexsidelength;
@property (nonatomic) CGFloat worldScale;
@property (nonatomic) BOOL allowZoom;
@property (nonatomic) BOOL allowMovement;
@property (nonatomic) CGFloat minZoom;
@property (nonatomic) CGFloat maxZoom;
@property (nonatomic, readonly) NSInteger layerCount;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull properties;
@property (nonatomic) CGFloat zDeltaForLayers;
/// ignore Tiled background color
@property (nonatomic) BOOL ignoreBackground;
@property (nonatomic, readonly) BOOL isRendered;
@property (nonatomic, strong) UIColor * _Nonnull overlayColor;
/// Optional background color (read from the Tiled file)
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// Crop the tilemap at the map edges.
@property (nonatomic) BOOL cropAtBoundary;
/// The tile map default base layer, used for displaying the current grid, getting coordinates, etc.
@property (nonatomic, strong) SKTileLayer * _Nonnull baseLayer;
@property (nonatomic) BOOL debugMode;
@property (nonatomic, strong) UIColor * _Nonnull color;
@property (nonatomic, strong) UIColor * _Nonnull gridColor;
@property (nonatomic, strong) UIColor * _Nonnull frameColor;
@property (nonatomic, strong) UIColor * _Nonnull highlightColor;
@property (nonatomic) BOOL autoResize;
@property (nonatomic) CGVector gravity;
/// Size of the map in points.
@property (nonatomic, readonly) CGSize sizeInPoints;
/// Rendered size of the map.
@property (nonatomic, readonly) CGSize renderSize;
/// Returns the last GID for all of the tilesets.
@property (nonatomic, readonly) NSInteger lastGID;
/// Returns the last index for all tilesets.
@property (nonatomic, readonly) NSInteger lastIndex;
/// Returns the last (highest) z-position in the map.
@property (nonatomic, readonly) CGFloat lastZPosition;
/// Tile overlap amount. 1 is typically a good value.
@property (nonatomic) CGFloat tileOverlap;
/// Global property to show/hide all <code>SKTileObject</code> objects.
@property (nonatomic) BOOL showObjects;
/// Convenience property to return all tile layers.
@property (nonatomic, readonly, copy) NSArray<SKTileLayer *> * _Nonnull tileLayers;
/// Convenience property to return all object groups.
@property (nonatomic, readonly, copy) NSArray<SKObjectGroup *> * _Nonnull objectGroups;
/// Convenience property to return all image layers.
@property (nonatomic, readonly, copy) NSArray<SKImageLayer *> * _Nonnull imageLayers;
/// Convenience property to return all group layers.
@property (nonatomic, readonly, copy) NSArray<SKGroupLayer *> * _Nonnull groupLayers;
/// Global antialiasing of lines
@property (nonatomic) BOOL antialiasLines;
/// Global tile count
@property (nonatomic, readonly) NSInteger tileCount;
/// Pauses the node, and colors all of its children darker.
@property (nonatomic, getter=isPaused) BOOL paused;
/// Initialize with dictionary attributes from xml parser.
/// \param attributes <code>Dictionary</code> attributes dictionary.
///
///
/// returns:
/// <code>SKTileMapNode?</code>
- (nullable instancetype)initWithAttributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Returns a point for a given coordinate in the layer.
/// \param coord <code>CGPoint</code> tile coordinate.
///
///
/// returns:
/// <code>CGPoint</code> point in layer.
- (CGPoint)pointForCoordinateWithCoord:(CGPoint)coord offsetX:(CGFloat)offsetX offsetY:(CGFloat)offsetY SWIFT_WARN_UNUSED_RESULT;
/// Returns a tile coordinate for a given point in the layer.
/// \param point <code>CGPoint</code> point in layer.
///
///
/// returns:
/// <code>CGPoint</code> tile coordinate.
- (CGPoint)coordinateForPoint:(CGPoint)point SWIFT_WARN_UNUSED_RESULT;
/// Returns all layers, sorted by index (first is lowest, last is highest).
///
/// returns:
/// <code>[TiledLayerObject]</code> array of layers.
- (NSArray<TiledLayerObject *> * _Nonnull)allLayers SWIFT_WARN_UNUSED_RESULT;
/// Returns an array of layer names.
///
/// returns:
/// <code>[String]</code> layer names.
- (NSArray<NSString *> * _Nonnull)layerNames SWIFT_WARN_UNUSED_RESULT;
/// Add a layer to the layers set. Automatically sets zPosition based on the zDeltaForLayers attributes.
/// \param layer <code>TiledLayerObject</code> layer object.
///
/// \param base <code>Bool</code> layer represents default layer.
///
- (void)addLayer:(TiledLayerObject * _Nonnull)layer base:(BOOL)base;
/// Remove a layer from the current layers set.
/// \param layer <code>TiledLayerObject</code> layer object.
///
///
/// returns:
/// <code>TiledLayerObject?</code> removed layer.
- (TiledLayerObject * _Nullable)removeLayer:(TiledLayerObject * _Nonnull)layer SWIFT_WARN_UNUSED_RESULT;
/// Create and add a new tile layer.
/// \param named <code>String</code> layer name.
///
///
/// returns:
/// <code>SKTileLayer</code> new layer.
- (SKTileLayer * _Nonnull)addNewTileLayer:(NSString * _Nonnull)named SWIFT_WARN_UNUSED_RESULT;
/// Returns a named tile layer from the layers set.
/// \param name <code>String</code> tile layer name.
///
///
/// returns:
/// <code>TiledLayerObject?</code> layer object.
- (TiledLayerObject * _Nullable)getLayerWithNamed:(NSString * _Nonnull)layerName SWIFT_WARN_UNUSED_RESULT;
/// Returns a layer matching the given UUID.
/// \param uuid <code>String</code> tile layer UUID.
///
///
/// returns:
/// <code>TiledLayerObject?</code> layer object.
- (TiledLayerObject * _Nullable)getLayerWithID:(NSString * _Nonnull)uuid SWIFT_WARN_UNUSED_RESULT;
/// Returns a layer given the index (0 being the lowest).
/// \param index <code>Int</code> layer index.
///
///
/// returns:
/// <code>TiledLayerObject?</code> layer object.
- (TiledLayerObject * _Nullable)getLayerAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Isolate a named layer (hides other layers). Pass <code>nil</code>
/// to show all layers.
/// \param named <code>String</code> layer name.
///
- (void)isolateLayer:(NSString * _Nullable)named;
/// Returns a named tile layer if it exists, otherwise, nil.
/// \param named <code>String</code> tile layer name.
///
///
/// returns:
/// <code>SKTileLayer?</code>
- (SKTileLayer * _Nullable)tileLayerWithNamed:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Returns a tile layer at the given index, otherwise, nil.
/// \param atIndex <code>Int</code> layer index.
///
///
/// returns:
/// <code>SKTileLayer?</code>
- (SKTileLayer * _Nullable)tileLayerAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Returns a named object group if it exists, otherwise, nil.
/// \param named <code>String</code> tile layer name.
///
///
/// returns:
/// <code>SKObjectGroup?</code>
- (SKObjectGroup * _Nullable)objectGroupWithNamed:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Returns an object group at the given index, otherwise, nil.
/// \param atIndex <code>Int</code> layer index.
///
///
/// returns:
/// <code>SKObjectGroup?</code>
- (SKObjectGroup * _Nullable)objectGroupAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Returns the index of a named layer.
/// \param named <code>String</code> layer name.
///
///
/// returns:
/// <code>Int</code> layer index.
- (NSInteger)indexOfLayedNamed:(NSString * _Nonnull)named SWIFT_WARN_UNUSED_RESULT;
/// Return tiles at the given coordinate (all tile layers).
/// \param coord <code>CGPoint</code> coordinate.
///
///
/// returns:
/// <code>[SKTile]</code> array of tiles.
- (NSArray<SKTile *> * _Nonnull)tilesAtCoord:(CGPoint)coord SWIFT_WARN_UNUSED_RESULT;
/// Return tiles at the given coordinate (all tile layers).
/// \param x <code>Int</code> x-coordinate.
///
/// \param y <code>Int</code> - y-coordinate.
///
///
/// returns:
/// <code>[SKTile]</code> array of tiles.
- (NSArray<SKTile *> * _Nonnull)tilesAt:(NSInteger)x :(NSInteger)y SWIFT_WARN_UNUSED_RESULT;
/// Returns a tile at the given coordinate from a layer.
/// \param coord <code>CGPoint</code> tile coordinate.
///
/// \param name <code>String?</code> layer name.
///
///
/// returns:
/// <code>SKTile?</code> tile, or nil.
- (SKTile * _Nullable)tileAtCoord:(CGPoint)coord inLayer:(NSString * _Nullable)named SWIFT_WARN_UNUSED_RESULT;
/// Returns a tile at the given coordinate from a layer.
/// \param x <code>Int</code> tile x-coordinate.
///
/// \param y <code>Int</code> tile y-coordinate.
///
/// \param named <code>String?</code> layer name.
///
///
/// returns:
/// <code>SKTile?</code> tile, or nil.
- (SKTile * _Nullable)tileAt:(NSInteger)x :(NSInteger)y inLayer:(NSString * _Nullable)named SWIFT_WARN_UNUSED_RESULT;
/// Returns tiles with a property of the given type (all tile layers).
/// \param type <code>String</code> type.
///
///
/// returns:
/// <code>[SKTile]</code> array of tiles.
- (NSArray<SKTile *> * _Nonnull)getTilesOfType:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// Returns tiles matching the given gid (all tile layers).
/// \param type <code>Int</code> tile gid.
///
///
/// returns:
/// <code>[SKTile]</code> array of tiles.
- (NSArray<SKTile *> * _Nonnull)getTilesWithID:(NSInteger)id SWIFT_WARN_UNUSED_RESULT;
/// Returns tiles with a property of the given type & value (all tile layers).
/// \param named <code>String</code> property name.
///
/// \param value <code>AnyObject</code> property value.
///
///
/// returns:
/// <code>[SKTile]</code> array of tiles.
- (NSArray<SKTile *> * _Nonnull)getTilesWithProperty:(NSString * _Nonnull)named :(id _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
/// Returns an array of all animated tile objects.
///
/// returns:
/// <code>[SKTile]</code> array of tiles.
- (NSArray<SKTile *> * _Nonnull)getAnimatedTiles SWIFT_WARN_UNUSED_RESULT;
/// Return the top-most tile at the given coordinate.
/// \param coord <code>CGPoint</code> coordinate.
///
///
/// returns:
/// <code>SKTile?</code> first tile in layers.
- (SKTile * _Nullable)firstTileAtCoord:(CGPoint)coord SWIFT_WARN_UNUSED_RESULT;
/// Return all of the current tile objects.
///
/// returns:
/// <code>[SKTileObject]</code> array of objects.
- (NSArray<SKTileObject *> * _Nonnull)getObjects SWIFT_WARN_UNUSED_RESULT;
/// Return objects matching a given type.
/// \param type <code>String</code> object type to query.
///
///
/// returns:
/// <code>[SKTileObject]</code> array of objects.
- (NSArray<SKTileObject *> * _Nonnull)getObjectsOfType:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// Return objects matching a given name.
/// \param named <code>String</code> object name to query.
///
///
/// returns:
/// <code>[SKTileObject]</code> array of objects.
- (NSArray<SKTileObject *> * _Nonnull)getObjects:(NSString * _Nonnull)named SWIFT_WARN_UNUSED_RESULT;
- (CGPoint)touchLocation:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
/// Returns a positing in negative-y space.
/// \param point <code>CGPoint</code> scene point.
///
///
/// returns:
/// <code>CGPoint</code> converted point in layer coordinate system.
- (CGPoint)positionInMapWithPoint:(CGPoint)point SWIFT_WARN_UNUSED_RESULT;
/// Called when parser has finished reading the map.
/// \param timeStarted <code>Date</code> render start time.
///
/// \param tasks <code>Int</code>  number of tasks to complete.
///
- (void)didFinishParsingWithTimeStarted:(NSDate * _Nonnull)timeStarted tasks:(NSInteger)tasks;
/// Called when parser has finished rendering the map.
/// \param timeStarted <code>Date</code> render start time.
///
- (void)didFinishRenderingWithTimeStarted:(NSDate * _Nonnull)timeStarted;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface SKTilemap (SWIFT_EXTENSION(SKTiled))
/// Parse properties from the Tiled TMX file.
- (void)parsePropertiesWithCompletion:(void (^ _Nullable)(void))completion;
@end


@interface SKTilemap (SWIFT_EXTENSION(SKTiled))
@property (nonatomic, readonly) CGFloat width;
@property (nonatomic, readonly) CGFloat height;
/// Returns the current tile width
@property (nonatomic, readonly) CGFloat tileWidth;
/// Returns the current tile height
@property (nonatomic, readonly) CGFloat tileHeight;
@property (nonatomic, readonly) CGSize sizeHalved;
@property (nonatomic, readonly) CGFloat tileWidthHalf;
@property (nonatomic, readonly) CGFloat tileHeightHalf;
@property (nonatomic, readonly) BOOL staggerX;
@property (nonatomic, readonly) BOOL staggerEven;
@property (nonatomic, readonly) CGFloat sideLengthX;
@property (nonatomic, readonly) CGFloat sideLengthY;
@property (nonatomic, readonly) CGFloat sideOffsetX;
@property (nonatomic, readonly) CGFloat sideOffsetY;
@property (nonatomic, readonly) CGFloat columnWidth;
@property (nonatomic, readonly) CGFloat rowHeight;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Visualize the current grid & bounds.
@property (nonatomic) BOOL debugDraw;
/// Output a summary of the current scenes layer data.
- (void)debugLayersWithReverse:(BOOL)reverse;
@end

@class NSXMLParser;

/// The <code>SKTilemapParser</code> is a custom <a href="https://developer.apple.com/reference/foundation/xmlparserdelegate"><code>XMLParserDelegate</code></a> parser for reading Tiled TMX and tileset TSX files.
/// To read a tile map, used the <code>SKTilemapParser.load</code> method:
/// \code
/// if let tilemap = SKTilemapParser().load(fromFile: "sample-file") {
///    scene.worldNode.addChild(tilemap)
/// }
///
/// \endcode
SWIFT_CLASS("_TtC7SKTiled15SKTilemapParser")
@interface SKTilemapParser : NSObject <NSXMLParserDelegate>
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull fileNames;
@property (nonatomic, copy) NSString * _Null_unspecified currentFileName;
@property (nonatomic, strong) SKTilemap * _Null_unspecified tilemap;
- (void)parser:(NSXMLParser * _Nonnull)parser didStartElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributeDict;
- (void)parser:(NSXMLParser * _Nonnull)parser didEndElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName;
- (void)parser:(NSXMLParser * _Nonnull)parser foundCharacters:(NSString * _Nonnull)string;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@interface TiledLayerObject (SWIFT_EXTENSION(SKTiled))
/// Parse the layer’s properties value.
- (void)parsePropertiesWithCompletion:(void (^ _Nullable)(void))completion;
/// Returns a named property for the layer.
/// \param name <code>String</code> property name.
///
///
/// returns:
/// <code>String?</code> the property value, or nil if it does not exist.
- (NSString * _Nullable)getValueForProperty:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Set a property/value pair.
/// \param name <code>String</code> property name.
///
/// \param value <code>String</code> property value.
///
- (void)setValue:(NSString * _Nonnull)value forProperty:(NSString * _Nonnull)name;
@end


@interface TiledLayerObject (SWIFT_EXTENSION(SKTiled))
/// Returns a point for a given coordinate in the layer.
/// \param x <code>Int</code> x-coordinate.
///
/// \param y <code>Int</code> y-coordinate.
///
/// \param offsetX <code>CGFloat</code> x-offset value.
///
/// \param offsetY <code>CGFloat</code> y-offset value.
///
///
/// returns:
/// <code>CGPoint</code> position in layer.
- (CGPoint)pointForCoordinate:(NSInteger)x :(NSInteger)y offsetX:(CGFloat)offsetX offsetY:(CGFloat)offsetY SWIFT_WARN_UNUSED_RESULT;
/// Returns a point for a given coordinate in the layer.
/// \param coord <code>CGPoint</code> tile coordinate.
///
/// \param offset <code>CGPoint</code> tile offset.
///
///
/// returns:
/// <code>CGPoint</code> point in layer.
- (CGPoint)pointForCoordinateWithCoord:(CGPoint)coord offset:(CGPoint)offset SWIFT_WARN_UNUSED_RESULT;
/// Returns a tile coordinate for a given point in the layer.
/// \param x <code>Int</code> x-position.
///
/// \param y <code>Int</code> y-position.
///
///
/// returns:
/// <code>CGPoint</code> position in layer.
- (CGPoint)coordinateForPoint:(NSInteger)x :(NSInteger)y SWIFT_WARN_UNUSED_RESULT;
/// Returns the center point of a layer.
@property (nonatomic, readonly) CGPoint center;
/// Calculate the distance from the layer’s origin
- (CGVector)distanceFromOrigin:(CGPoint)pos SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


@interface UIColor (SWIFT_EXTENSION(SKTiled))
/// Initialize an SKColor with a hexidecimal string.
/// \param hexString <code>String</code> hexidecimal code.
///
///
/// returns:
/// <code>SKColor</code>
- (nonnull instancetype)initWithHexString:(NSString * _Nonnull)hexString;
/// Returns a hexadecimal string representation of the color.
///
/// returns:
/// <code>String</code> hexadecimal string.
- (NSString * _Nonnull)hexString SWIFT_WARN_UNUSED_RESULT;
- (GLKVector4)vec4 SWIFT_WARN_UNUSED_RESULT;
@end

#pragma clang diagnostic pop
